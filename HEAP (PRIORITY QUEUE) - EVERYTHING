#include<bits/stdc++.h>
using namespace std;

class heap{
    public: 
    int arr[100];
    int size;

    heap(){
        arr[0] = -1;
        size = 0;
    }
    //TIME COMPLEXITY --> O(log(N))
    void insertInHeap(int val){
        size = size + 1;
        int index = size;
        arr[index] = val;

        //chech is it in correct position
        while(index > 1){
            int parentIndex = (index /2 );
            
            if(arr[parentIndex] < arr[index]){
                swap(arr[parentIndex], arr[index]);
                index = parentIndex ;
            }
            else    
                return;
        }
    }

    //DELETION IN MAX HEAP
    void deleteFromMaxHeap()
    {
        if(size == 0)         //if Heap is empty
        {
            cout << "Heap is EMPTY! Can't delete:)" << endl;
            return ;
        }
        //if it's not Empty
        //Step 1.Replace root's value with last node's value
        arr[1] = arr[size];
        //Step 2.Remove access of the last node, so that nobody can acess
        size--;   

        //Step 3: Take the New Root node to it's correct place
        int index = 1;
        while(index < size)
        {
            //3.1.we gonna calulate it's RC & LC
            int leftChildIndex = (2 * index);
            int rightChildIndex = (2 * index + 1);
            //3.2. Compare and swap
            if(leftChildIndex < size && arr[index] < arr[leftChildIndex])
            {
                swap(arr[index] , arr[leftChildIndex]);
                index = leftChildIndex;
            }
            if(rightChildIndex < size && arr[index] < arr[rightChildIndex])
            {
                swap(arr[index] , arr[rightChildIndex]);
                index = rightChildIndex;
            }
            else    
                return;


        }
            
    }


    void printHeap(){
        for(int i = 1; i <= size; ++i){
            cout<< arr[i] << " ";
        }
        cout<< endl;

    }
};

//Time Complexity --> O(log(n))
void heapifyMaxHeap(int arr[], int n, int i)
{
    //1.Make currernt node the largest
    int largest = i;
    //2.Calculate it's RC & LC
    int leftChildIndex = 2 * i;
    int rightChildIndex = 2 * i + 1;
    
    //3. Compare and update largest Index, if neccesary
    if(leftChildIndex <= n && arr[largest] < arr[leftChildIndex])
    {
        largest = leftChildIndex;
    }
    if(rightChildIndex <= n && arr[largest] < arr[rightChildIndex])
    {
        largest = rightChildIndex;
    }
    
    //4. Check whether largest has been updated or not, and swap accordingly
    if(largest != i)
    {
        swap(arr[largest], arr[i]);
        //4.1. Recursively calling Heapify function on the sub-tree where largest has been updated
        heapifyMaxHeap(arr, n, largest);
    }
}

void heapifyMinHeap(int arr[], int n, int i)
{
    //1.Make currernt node the largest
    int smallest = i;
    //2.Calculate it's RC & LC
    int leftChildIndex = 2 * i;
    int rightChildIndex = 2 * i + 1;
    
    //3. Compare and update largest Index, if neccesary
    if(leftChildIndex < n && arr[smallest] > arr[leftChildIndex])
    {
        smallest = leftChildIndex;
    }
    if(rightChildIndex < n && arr[smallest] > arr[rightChildIndex])
    {
        smallest = rightChildIndex;
    }
    
    //4. Check whether largest has been updated or not, and swap accordingly
    if(smallest != i)
    {
        swap(arr[smallest], arr[i]);
        //4.1. Recursively calling Heapify function on the sub-tree where largest has been updated
        heapifyMinHeap(arr, n, smallest);
    }
}


void heapSort(int arr[], int nn)
{
    int t = nn;

    while(t > 1)
    {
        //Step 1. Swap root node with the last node 
        swap(arr[1], arr[t]);
        //Step 1.1 . dicrement the size, cause last element is sorted
        t--;

        //Step 2. Take the current node to it's correct location
        heapifyMaxHeap(arr, t, 1);
    }
}

int main(){
    heap h;
    h.insertInHeap(45);
    h.insertInHeap(30);
    h.insertInHeap(60);
    h.insertInHeap(70);
    h.insertInHeap(49);

    //h.deleteFromMaxHeap();

    h.printHeap();

    int arr[8] = {-1, 54, 53, 55, 52, 50, 45, 42};
    int n = 7;
    for(int i = n/2; i > 0; --i)
    {
        heapifyMaxHeap(arr, n, i );
    }
    cout << "Printing AFTER Max Heapify" << endl;
    for(int i =1 ; i <= 7; ++i)
    {
        cout<< arr[i] << " ";
    } cout << endl;
    
    for(int i = n/2; i > 0; --i)
    {
        heapifyMinHeap(arr, n, i );
    }
    cout << "Printing AFTER Min Heapify" << endl;
    for(int i =1 ; i <= 7; ++i)
    {
        cout<< arr[i] << " ";
    } cout << endl;

    heapSort(arr, n);
    cout << "Printing AFTER Heap Sort" << endl;
    for(int i =1 ; i <= n; ++i)
    {
        cout<< arr[i] << " ";
    } cout << endl;

    priority_queue<int> pq;
    pq.push(45);
    pq.push(44);
    pq.push(66);
    pq.push(7);
    pq.push(16);

    cout << "Top element: " << pq.top() << endl;
    pq.pop();
    cout << "New top element: " << pq.top() << endl;
    cout << "Size: " << pq.size() << endl;

    cout << "Priority queue Min Heap: " << endl;

    priority_queue< int, vector<int> , greater<int> > pqMin;

    pqMin.push(45);
    pqMin.push(44);
    pqMin.push(66);
    pqMin.push(7);
    pqMin.push(16);

    cout << "Top element: " << pqMin.top() << endl;
    pqMin.pop();
    cout << "New top element: " << pqMin.top() << endl;
    cout << "Size: " << pqMin.size() << endl;

    
}
